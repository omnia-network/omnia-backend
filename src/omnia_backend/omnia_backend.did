type DeviceAffordances = record { properties : vec text; actions : vec text };
type EnvironmentCreationInput = record { env_name : text };
type EnvironmentCreationResult = record { env_uid : text; env_name : text };
type EnvironmentInfo = record { env_uid : text };
type GatewayRegistrationInput = record { gateway_name : text; env_uid : text };
type HttpRequest = record {
  url : text;
  method : text;
  body : opt vec nat8;
  headers : vec record { text; text };
  upgrade : opt bool;
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  upgrade : opt bool;
  streaming_strategy : opt text;
  status_code : nat16;
};
type InitializedGatewayValue = record {
  principal_id : text;
  proxied_gateway_uid : opt text;
};
type PairingInfo = record { payload : text };
type PublicKeyReply = record { public_key_hex : text };
type RegisteredDeviceIndex = record { device_uid : text };
type RegisteredDeviceValue = record {
  required_headers : opt vec record { text; text };
  env_uid : text;
  device_url : text;
  gateway_principal_id : text;
};
type RegisteredGatewayValue = record {
  gateway_name : text;
  gateway_ip : text;
  env_uid : text;
  gat_registered_device_uids : vec record { text; null };
  gateway_url : text;
  proxied_gateway_uid : opt text;
};
type Result = variant { Ok : EnvironmentCreationResult; Err : text };
type Result_1 = variant { Ok : vec nat8; Err : text };
type Result_10 = variant { Ok : RegisteredGatewayValue; Err : text };
type Result_11 = variant { Ok : EnvironmentInfo; Err : text };
type Result_12 = variant { Ok : SignatureReply; Err : text };
type Result_13 = variant { Ok : SignatureVerificationReply; Err : text };
type Result_2 = variant { Ok : PublicKeyReply; Err : text };
type Result_3 = variant { Ok : vec InitializedGatewayValue; Err : text };
type Result_4 = variant { Ok : VirtualPersonaValue; Err : text };
type Result_5 = variant { Ok : vec text; Err : text };
type Result_6 = variant { Ok : vec RegisteredGatewayValue; Err : text };
type Result_7 = variant { Ok : text; Err : text };
type Result_8 = variant { Ok : UpdateValue; Err : text };
type Result_9 = variant {
  Ok : record { RegisteredDeviceIndex; RegisteredDeviceValue };
  Err : text;
};
type SignatureReply = record { signature_hex : text };
type SignatureVerificationReply = record { is_signature_valid : bool };
type Tokens = record { e8s : nat64 };
type UpdateValue = record {
  info : PairingInfo;
  command : text;
  virtual_persona_principal_id : text;
  virtual_persona_ip : text;
};
type VirtualPersonaValue = record {
  manager_env_uid : opt text;
  user_env_uid : opt text;
  virtual_persona_principal_id : text;
  virtual_persona_ip : text;
};
service : (text, text, text) -> {
  createEnvironment : (EnvironmentCreationInput) -> (Result);
  executeRdfDbQuery : (text) -> (Result_1) query;
  executeRdfDbQueryAsUpdate : (text) -> (Result_1);
  getCanisterPublicKey : (text) -> (Result_2);
  getGatewayUpdates : () -> (opt UpdateValue);
  getInitializedGateways : (text) -> (Result_3);
  getProfile : (text) -> (Result_4);
  getRegisteredDevices : () -> (Result_5);
  getRegisteredGateways : (text) -> (Result_6);
  getRequestKey : (nat64) -> (opt nat);
  http_request : (HttpRequest) -> (HttpResponse) query;
  http_request_update : (HttpRequest) -> (HttpResponse);
  initGateway : (text) -> (Result_7);
  pairNewDevice : (text, text, text) -> (Result_8);
  registerDevice : (text, DeviceAffordances) -> (Result_9);
  registerGateway : (text, GatewayRegistrationInput) -> (Result_10);
  resetEnvironment : (text) -> (Result_11);
  setEnvironment : (text) -> (Result_11);
  signMessage : (text) -> (Result_12);
  transferIcpsToPrincipal : (text, Tokens) -> (nat64);
  verifyMessage : (text, text, text) -> (Result_13) query;
  whoAmI : () -> (text) query;
}