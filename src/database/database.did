type AccessKeyCreationArgs = record {
  transaction_hash : vec nat8;
  owner : principal;
};
type AccessKeyValue = record {
  key : text;
  transaction_hash : vec nat8;
  counter : nat;
  owner : principal;
  used_nonces : vec nat;
};
type EnvironmentCreationInput = record { env_name : text };
type EnvironmentCreationResult = record { env_uid : text; env_name : text };
type EnvironmentInfo = record { env_uid : text };
type GatewayRegistrationInput = record { gateway_name : text; env_uid : text };
type InitializedGatewayValue = record {
  principal_id : text;
  proxied_gateway_uid : opt text;
};
type IpChallengeValue = record {
  requester_ip : text;
  timestamp : nat64;
  is_proxied : bool;
  proxied_gateway_uid : opt text;
};
type PairingInfo = record { payload : text };
type RegisteredDeviceIndex = record { device_uid : text };
type RegisteredDeviceValue = record {
  required_headers : opt vec record { text; text };
  env_uid : text;
  device_url : text;
  gateway_principal_id : text;
};
type RegisteredGatewayValue = record {
  gateway_name : text;
  gateway_ip : text;
  env_uid : text;
  gat_registered_device_uids : vec record { text; null };
  gateway_url : text;
  proxied_gateway_uid : opt text;
};
type RejectedAccessKey = record {
  key : text;
  reason : RejectedAccessKeyReason;
};
type RejectedAccessKeyReason = variant {
  InvalidNonce;
  InvalidAccessKey;
  InvalidSignature;
  NonceAlreadyUsed;
  SignatureVerificationError : text;
};
type Result = variant { Ok : AccessKeyValue; Err : text };
type Result_1 = variant { Ok : EnvironmentCreationResult; Err : text };
type Result_10 = variant { Ok : EnvironmentInfo; Err : text };
type Result_11 = variant { Ok : vec RejectedAccessKey; Err : text };
type Result_2 = variant { Ok : vec InitializedGatewayValue; Err : text };
type Result_3 = variant { Ok : vec text; Err : text };
type Result_4 = variant { Ok : vec RegisteredGatewayValue; Err : text };
type Result_5 = variant { Ok : VirtualPersonaValue; Err : text };
type Result_6 = variant { Ok : text; Err : text };
type Result_7 = variant { Ok : UpdateValue; Err : text };
type Result_8 = variant {
  Ok : record { RegisteredDeviceIndex; RegisteredDeviceValue };
  Err : text;
};
type Result_9 = variant { Ok : RegisteredGatewayValue; Err : text };
type UniqueAccessKey = record { key : text; nonce : nat };
type UpdateValue = record {
  info : PairingInfo;
  command : text;
  virtual_persona_principal_id : text;
  virtual_persona_ip : text;
};
type VirtualPersonaValue = record {
  manager_env_uid : opt text;
  user_env_uid : opt text;
  virtual_persona_principal_id : text;
  virtual_persona_ip : text;
};
service : (text, text, text) -> {
  check_if_virtual_persona_exists : (text) -> (bool) query;
  create_new_access_key : (AccessKeyCreationArgs) -> (Result);
  create_new_environment : (text, EnvironmentCreationInput) -> (Result_1);
  get_gateway_updates_by_principal : (text) -> (opt UpdateValue);
  get_initialized_gateways_by_ip : (text) -> (Result_2);
  get_registered_devices_on_gateway : (text) -> (Result_3);
  get_registered_gateways_in_environment : (text) -> (Result_4);
  get_virtual_persona : (text, text) -> (Result_5);
  init_gateway_by_ip : (text, text) -> (Result_6);
  init_nonce_to_ip : (text, IpChallengeValue) -> ();
  is_gateway_registered : (text) -> (bool);
  pair_new_device_on_gateway : (text, text, text, text) -> (Result_7);
  register_device_on_gateway : (text, text) -> (Result_8);
  register_gateway_in_environment : (text, text, GatewayRegistrationInput) -> (
      Result_9,
    );
  reset_user_from_environment : (text, text) -> (Result_10);
  set_user_in_environment : (text, text) -> (Result_10);
  spend_requests_for_keys : (vec UniqueAccessKey) -> (Result_11);
}